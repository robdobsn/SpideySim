// Generated by CoffeeScript 1.8.0
(function() {
  this.SpideyGraph = (function() {
    function SpideyGraph() {}

    SpideyGraph.prototype.padAdjacencies = [];

    SpideyGraph.prototype.maxDistForPadAdjacency = 300;

    SpideyGraph.prototype.maxDistForLedAdjacency = 10;

    SpideyGraph.prototype.maxDistForNodeDetect = 12;

    SpideyGraph.prototype.maxDistForNodeMerge = 10;

    SpideyGraph.prototype.genColours = function(numColours) {
      var colourList, colrStr, hslColour, i, _i, _ref;
      colourList = [];
      for (i = _i = 0, _ref = 360 / numColours; _i < 360; i = _i += _ref) {
        hslColour = d3.hsl((i * 1787) % 360, 0.90 + Math.random() * 0.10, 0.50 + Math.random() * 0.10);
        colrStr = hslColour.toString();
        colourList.push(colrStr);
      }
      return colourList;
    };

    SpideyGraph.prototype.dist = function(led1, led2) {
      var dx, dy;
      dx = led1.pt.x - led2.pt.x;
      dy = led1.pt.y - led2.pt.y;
      return Math.sqrt(dx * dx + dy * dy);
    };

    SpideyGraph.prototype.getCofGforLeds = function(padLedsData, ledList) {
      var ledId, xSum, ySum, _i, _len;
      xSum = 0;
      ySum = 0;
      for (_i = 0, _len = ledList.length; _i < _len; _i++) {
        ledId = ledList[_i];
        xSum += padLedsData[ledId[0]][ledId[1]].pt.x;
        ySum += padLedsData[ledId[0]][ledId[1]].pt.y;
      }
      return {
        pt: {
          x: xSum / ledList.length,
          y: ySum / ledList.length
        }
      };
    };

    SpideyGraph.prototype.createGraph = function(padOutlines, padLedsData, svg) {
      var adjFound, alreadInList, colrIdx, colrs, curCofG, led, ledAdjList, ledIdx, ledInfo, ledPadFound, ledUniqPads, listMerged, nodeAlreadyInList, nodeLed, nodeLedList, nodeLeds, nodeLedsIdx, nodeRationalisedList, nodesSvg, otherLedIdx, otherLedInfo, otherNodeLed, otherNodeLedsIdx, otherPadIdx, otherPadLedsInfo, padAdjList, padIdx, padLedsInfo, _i, _j, _k, _l, _len, _len1, _len10, _len11, _len12, _len2, _len3, _len4, _len5, _len6, _len7, _len8, _len9, _m, _n, _o, _p, _q, _r, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _s, _t, _u, _v, _w;
      for (padIdx = _i = 0, _len = padLedsData.length; _i < _len; padIdx = ++_i) {
        padLedsInfo = padLedsData[padIdx];
        this.padAdjacencies.push([]);
        for (otherPadIdx = _j = 0, _ref = padLedsData.length; 0 <= _ref ? _j < _ref : _j > _ref; otherPadIdx = 0 <= _ref ? ++_j : --_j) {
          if (padIdx === otherPadIdx) {
            continue;
          }
          otherPadLedsInfo = padLedsData[otherPadIdx];
          if (this.dist(padLedsInfo[0], otherPadLedsInfo[0]) > this.maxDistForPadAdjacency) {
            continue;
          }
          adjFound = false;
          for (ledIdx = _k = 0, _len1 = padLedsInfo.length; _k < _len1; ledIdx = ++_k) {
            ledInfo = padLedsInfo[ledIdx];
            if (this.dist(ledInfo, otherPadLedsInfo[0]) > this.maxDistForPadAdjacency) {
              continue;
            }
            for (otherLedIdx = _l = 0, _len2 = otherPadLedsInfo.length; _l < _len2; otherLedIdx = ++_l) {
              otherLedInfo = otherPadLedsInfo[otherLedIdx];
              if (this.dist(ledInfo, otherLedInfo) < this.maxDistForLedAdjacency) {
                adjFound = true;
                this.padAdjacencies[padIdx].push(otherPadIdx);
                break;
              }
            }
            if (adjFound) {
              break;
            }
          }
        }
      }
      nodeLedList = [];
      _ref1 = this.padAdjacencies;
      for (padIdx = _m = 0, _len3 = _ref1.length; _m < _len3; padIdx = ++_m) {
        padAdjList = _ref1[padIdx];
        _ref2 = padLedsData[padIdx];
        for (ledIdx = _n = 0, _len4 = _ref2.length; _n < _len4; ledIdx = ++_n) {
          ledInfo = _ref2[ledIdx];
          ledAdjList = [];
          ledUniqPads = 0;
          for (_o = 0, _len5 = padAdjList.length; _o < _len5; _o++) {
            otherPadIdx = padAdjList[_o];
            ledPadFound = false;
            _ref3 = padLedsData[otherPadIdx];
            for (otherLedIdx = _p = 0, _len6 = _ref3.length; _p < _len6; otherLedIdx = ++_p) {
              otherLedInfo = _ref3[otherLedIdx];
              if (this.dist(ledInfo, otherLedInfo) < this.maxDistForNodeDetect) {
                if (ledAdjList.length === 0) {
                  ledAdjList.push([padIdx, ledIdx]);
                }
                ledAdjList.push([otherPadIdx, otherLedIdx]);
                if (!ledPadFound) {
                  ledUniqPads++;
                  ledPadFound = true;
                }
              }
            }
          }
          if (ledUniqPads >= 2) {
            nodeAlreadyInList = false;
            for (_q = 0, _len7 = nodeLedList.length; _q < _len7; _q++) {
              nodeLeds = nodeLedList[_q];
              for (_r = 0, _len8 = nodeLeds.length; _r < _len8; _r++) {
                led = nodeLeds[_r];
                if (led[0] === padIdx) {
                  if (led[1] === ledIdx) {
                    nodeAlreadyInList = true;
                    break;
                  }
                }
              }
              if (nodeAlreadyInList) {
                break;
              }
            }
            if (!nodeAlreadyInList) {
              nodeLedList.push(ledAdjList);
            }
          }
        }
      }
      console.log("NodeLedListUnRationalised " + nodeLedList.length);
      nodeRationalisedList = [];
      for (nodeLedsIdx = _s = 0, _len9 = nodeLedList.length; _s < _len9; nodeLedsIdx = ++_s) {
        nodeLeds = nodeLedList[nodeLedsIdx];
        curCofG = this.getCofGforLeds(padLedsData, nodeLeds);
        for (otherNodeLedsIdx = _t = _ref4 = nodeLedsIdx + 1, _ref5 = nodeLedList.length; _ref4 <= _ref5 ? _t < _ref5 : _t > _ref5; otherNodeLedsIdx = _ref4 <= _ref5 ? ++_t : --_t) {
          listMerged = false;
          if (this.dist(curCofG, this.getCofGforLeds(padLedsData, nodeLedList[otherNodeLedsIdx])) < this.maxDistForNodeMerge) {
            for (_u = 0, _len10 = nodeLeds.length; _u < _len10; _u++) {
              nodeLed = nodeLeds[_u];
              alreadInList = false;
              _ref6 = nodeLedList[otherNodeLedsIdx];
              for (_v = 0, _len11 = _ref6.length; _v < _len11; _v++) {
                otherNodeLed = _ref6[_v];
                if (nodeLed[0] === otherNodeLed[0] && nodeLed[1] === otherNodeLed[1]) {
                  alreadInList = true;
                }
              }
              if (!alreadInList) {
                nodeLedList[otherNodeLedsIdx].push(nodeLed);
              }
            }
            listMerged = true;
            break;
          }
        }
        if (!listMerged) {
          nodeRationalisedList.push({
            leds: nodeLeds,
            CofG: this.getCofGforLeds(padLedsData, nodeLeds)
          });
        }
      }
      colrs = this.genColours(nodeRationalisedList.length);
      colrIdx = 0;
      console.log("NumNodes = " + nodeRationalisedList.length);
      for (_w = 0, _len12 = nodeRationalisedList.length; _w < _len12; _w++) {
        nodeLeds = nodeRationalisedList[_w];
        nodeLeds.colr = colrs[colrIdx++];
      }
      return nodesSvg = svg.selectAll("g.nodes").data(nodeRationalisedList).enter().append("g").attr("class", "nodes").append("circle").attr("class", "node").attr("cx", function(d) {
        return d.CofG.pt.x;
      }).attr("cy", function(d) {
        return d.CofG.pt.y;
      }).attr("r", 5).attr("fill", function(d, i) {
        return d.colr;
      });
    };

    return SpideyGraph;

  })();

}).call(this);
