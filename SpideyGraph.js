// Generated by CoffeeScript 1.7.1
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

this.SpideyGraph = (function() {
  function SpideyGraph() {
    this.stepFn = __bind(this.stepFn, this);
    this.sendLedCmd = __bind(this.sendLedCmd, this);
    this.mousemoveEdges = __bind(this.mousemoveEdges, this);
    this.mousemoveLeds = __bind(this.mousemoveLeds, this);
  }

  SpideyGraph.prototype.DEBUG_EDGES = false;

  SpideyGraph.prototype.DEBUG_NODES = false;

  SpideyGraph.prototype.padAdjacencies = [];

  SpideyGraph.prototype.maxDistForPadAdjacency = 300;

  SpideyGraph.prototype.maxDistForLedAdjacency = 10;

  SpideyGraph.prototype.maxDistForNodeDetect = 10;

  SpideyGraph.prototype.maxDistForNodeMerge = 10;

  SpideyGraph.prototype.minDistForEndNode = 20;

  SpideyGraph.prototype.maxDistForFirstAndLastLedsOnCircularPad = 30;

  SpideyGraph.prototype.minDistBetweenNodes = 12;

  SpideyGraph.prototype.genColours = function(numColours) {
    var colourList, colrStr, hslColour, i, _i, _ref;
    colourList = [];
    for (i = _i = 0, _ref = 360 / numColours; _i < 360; i = _i += _ref) {
      hslColour = d3.hsl((i * 1787) % 360, 0.90 + Math.random() * 0.10, 0.50 + Math.random() * 0.10);
      colrStr = hslColour.toString();
      colourList.push(colrStr);
    }
    return colourList;
  };

  SpideyGraph.prototype.dist = function(led1, led2) {
    var dx, dy;
    dx = led1.pt.x - led2.pt.x;
    dy = led1.pt.y - led2.pt.y;
    return Math.sqrt(dx * dx + dy * dy);
  };

  SpideyGraph.prototype.getCofGforLeds = function(ledList) {
    var ledId, rlstPt, xSum, ySum, _i, _len;
    xSum = 0;
    ySum = 0;
    for (_i = 0, _len = ledList.length; _i < _len; _i++) {
      ledId = ledList[_i];
      xSum += this.padLedsList[ledId.padIdx][ledId.ledIdx].pt.x;
      ySum += this.padLedsList[ledId.padIdx][ledId.ledIdx].pt.y;
    }
    rlstPt = {
      x: xSum / ledList.length,
      y: ySum / ledList.length
    };
    return {
      pt: rlstPt
    };
  };

  SpideyGraph.prototype.createGraph = function(padOutlines, padLedsList, ledsSel, svg) {
    var adjFound, alreadInList, curCofG, curEdgeIdx, discardFree, distFromCofGtoLed, edgeInfo, edgeLength, edgeNodeLeds, edgeNodeLedsList, edgeSteps, edgeStr, edgeStr2, edgeStr3, edgeTo, edgesList, freeLeds, fromNode, fullNode, i, key, led, led1, led2, ledAdjList, ledBase, ledDist, ledDistances, ledIdx, ledInc, ledInfo, ledPadFound, ledUniqPads, leds, ledsModified, ledsUsed, listMerged, multiNodeLeds, multiNodeLedsIdx, multiNodeLedsList, n1, n2, newList, node, nodeAlreadyInList, nodeIdx, nodeInfo, nodeLed, nodeLeds, nodesMerged, numleds, oStr, otherLed, otherLedDist, otherLedIdx, otherLedInfo, otherLedUse, otherNodeIdx, otherNodeLed, otherNodeLedsIdx, otherPadIdx, otherPadLedIsEndOfChainToo, otherPadLedsInfo, padAdjList, padCircuit, padEdgeLeds, padIdx, padLedsInfo, rationalisedEdgeNodeLedsList, rationalisedMultiNodeLedsList, step, tLedIdx, testLedIdx, testNode, testNodeIdx, testNodeLeds, thisNode, toNodeLed, val, wrapRoundNumLeds, wrappedRound, _aa, _ab, _ac, _ad, _ae, _af, _ag, _ah, _ai, _aj, _ak, _al, _am, _an, _ao, _ap, _aq, _ar, _as, _at, _i, _j, _k, _l, _len, _len1, _len10, _len11, _len12, _len13, _len14, _len15, _len16, _len17, _len18, _len19, _len2, _len20, _len21, _len22, _len23, _len24, _len25, _len26, _len27, _len28, _len29, _len3, _len30, _len31, _len32, _len4, _len5, _len6, _len7, _len8, _len9, _m, _n, _o, _p, _q, _r, _ref, _ref1, _ref10, _ref11, _ref12, _ref13, _ref14, _ref15, _ref16, _ref17, _ref18, _ref19, _ref2, _ref20, _ref21, _ref22, _ref23, _ref24, _ref25, _ref26, _ref27, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8, _ref9, _results, _s, _t, _u, _v, _w, _x, _y, _z;
    this.padLedsList = padLedsList;
    this.ledsSel = ledsSel;
    this.svg = svg;
    _ref = this.padLedsList;
    for (padIdx = _i = 0, _len = _ref.length; _i < _len; padIdx = ++_i) {
      padLedsInfo = _ref[padIdx];
      this.padAdjacencies.push([]);
      for (otherPadIdx = _j = 0, _ref1 = this.padLedsList.length; 0 <= _ref1 ? _j < _ref1 : _j > _ref1; otherPadIdx = 0 <= _ref1 ? ++_j : --_j) {
        if (padIdx === otherPadIdx) {
          continue;
        }
        otherPadLedsInfo = this.padLedsList[otherPadIdx];
        if (this.dist(padLedsInfo[0], otherPadLedsInfo[0]) > this.maxDistForPadAdjacency) {
          continue;
        }
        adjFound = false;
        for (ledIdx = _k = 0, _len1 = padLedsInfo.length; _k < _len1; ledIdx = ++_k) {
          ledInfo = padLedsInfo[ledIdx];
          if (this.dist(ledInfo, otherPadLedsInfo[0]) > this.maxDistForPadAdjacency) {
            continue;
          }
          for (otherLedIdx = _l = 0, _len2 = otherPadLedsInfo.length; _l < _len2; otherLedIdx = ++_l) {
            otherLedInfo = otherPadLedsInfo[otherLedIdx];
            if (this.dist(ledInfo, otherLedInfo) < this.maxDistForLedAdjacency) {
              adjFound = true;
              this.padAdjacencies[padIdx].push(otherPadIdx);
              break;
            }
          }
          if (adjFound) {
            break;
          }
        }
      }
    }
    multiNodeLedsList = [];
    edgeNodeLedsList = [];
    _ref2 = this.padAdjacencies;
    for (padIdx = _m = 0, _len3 = _ref2.length; _m < _len3; padIdx = ++_m) {
      padAdjList = _ref2[padIdx];
      _ref3 = this.padLedsList[padIdx];
      for (ledIdx = _n = 0, _len4 = _ref3.length; _n < _len4; ledIdx = ++_n) {
        ledInfo = _ref3[ledIdx];
        ledAdjList = [];
        ledUniqPads = [];
        for (_o = 0, _len5 = padAdjList.length; _o < _len5; _o++) {
          otherPadIdx = padAdjList[_o];
          ledPadFound = false;
          _ref4 = this.padLedsList[otherPadIdx];
          for (otherLedIdx = _p = 0, _len6 = _ref4.length; _p < _len6; otherLedIdx = ++_p) {
            otherLedInfo = _ref4[otherLedIdx];
            if (this.dist(ledInfo, otherLedInfo) < this.maxDistForNodeDetect) {
              if (ledAdjList.length === 0) {
                ledAdjList.push({
                  padIdx: padIdx,
                  ledIdx: ledIdx
                });
              }
              ledAdjList.push({
                padIdx: otherPadIdx,
                ledIdx: otherLedIdx
              });
              if (!ledPadFound) {
                if (__indexOf.call(ledUniqPads, otherPadIdx) < 0) {
                  ledUniqPads.push(otherPadIdx);
                }
                ledPadFound = true;
              }
            }
          }
        }
        if (ledUniqPads.length >= 2) {
          nodeAlreadyInList = false;
          for (_q = 0, _len7 = multiNodeLedsList.length; _q < _len7; _q++) {
            nodeLeds = multiNodeLedsList[_q];
            for (_r = 0, _len8 = nodeLeds.length; _r < _len8; _r++) {
              led = nodeLeds[_r];
              if (led.padIdx === padIdx) {
                if (led.ledIdx === ledIdx) {
                  nodeAlreadyInList = true;
                  break;
                }
              }
            }
            if (nodeAlreadyInList) {
              break;
            }
          }
          if (!nodeAlreadyInList) {
            multiNodeLedsList.push(ledAdjList);
          }
        } else {
          if (ledIdx === 0 || ledIdx === this.padLedsList[padIdx].length - 1) {
            otherPadLedIsEndOfChainToo = false;
            for (_s = 0, _len9 = ledAdjList.length; _s < _len9; _s++) {
              otherLed = ledAdjList[_s];
              if (!(otherLed.padIdx === padIdx && otherLed.ledIdx === ledIdx)) {
                if (otherLed.ledIdx === 0 || otherLed.ledIdx === this.padLedsList[otherLed.padIdx].length - 1) {
                  otherPadLedIsEndOfChainToo = true;
                  break;
                }
              }
            }
            if (otherPadLedIsEndOfChainToo && (ledAdjList.length !== 0)) {
              edgeNodeLedsList.push(ledAdjList);
            }
          }
        }
      }
    }
    rationalisedMultiNodeLedsList = [];
    for (multiNodeLedsIdx = _t = 0, _len10 = multiNodeLedsList.length; _t < _len10; multiNodeLedsIdx = ++_t) {
      multiNodeLeds = multiNodeLedsList[multiNodeLedsIdx];
      curCofG = this.getCofGforLeds(multiNodeLeds);
      for (otherNodeLedsIdx = _u = _ref5 = multiNodeLedsIdx + 1, _ref6 = multiNodeLedsList.length; _ref5 <= _ref6 ? _u < _ref6 : _u > _ref6; otherNodeLedsIdx = _ref5 <= _ref6 ? ++_u : --_u) {
        listMerged = false;
        if (this.dist(curCofG, this.getCofGforLeds(multiNodeLedsList[otherNodeLedsIdx])) < this.maxDistForNodeMerge) {
          for (_v = 0, _len11 = multiNodeLeds.length; _v < _len11; _v++) {
            nodeLed = multiNodeLeds[_v];
            alreadInList = false;
            _ref7 = multiNodeLedsList[otherNodeLedsIdx];
            for (_w = 0, _len12 = _ref7.length; _w < _len12; _w++) {
              otherNodeLed = _ref7[_w];
              if (nodeLed.padIdx === otherNodeLed.padIdx && nodeLed.ledIdx === otherNodeLed.ledIdx) {
                alreadInList = true;
              }
            }
            if (!alreadInList) {
              multiNodeLedsList[otherNodeLedsIdx].push(nodeLed);
            }
          }
          listMerged = true;
          break;
        }
      }
      if (!listMerged) {
        rationalisedMultiNodeLedsList.push({
          leds: multiNodeLeds,
          CofG: this.getCofGforLeds(multiNodeLeds),
          nodeDegree: 2
        });
      }
    }
    rationalisedEdgeNodeLedsList = [];
    for (_x = 0, _len13 = edgeNodeLedsList.length; _x < _len13; _x++) {
      edgeNodeLeds = edgeNodeLedsList[_x];
      curCofG = this.getCofGforLeds(edgeNodeLeds);
      discardFree = false;
      for (_y = 0, _len14 = rationalisedMultiNodeLedsList.length; _y < _len14; _y++) {
        nodeLeds = rationalisedMultiNodeLedsList[_y];
        if (this.dist(curCofG, this.getCofGforLeds(nodeLeds.leds)) < this.minDistForEndNode) {
          discardFree = true;
          break;
        }
      }
      for (_z = 0, _len15 = rationalisedEdgeNodeLedsList.length; _z < _len15; _z++) {
        freeLeds = rationalisedEdgeNodeLedsList[_z];
        if (this.dist(curCofG, this.getCofGforLeds(freeLeds.leds)) < this.minDistForEndNode) {
          discardFree = true;
          break;
        }
      }
      if (!discardFree) {
        rationalisedEdgeNodeLedsList.push({
          leds: edgeNodeLeds,
          CofG: this.getCofGforLeds(edgeNodeLeds),
          nodeDegree: 1
        });
      }
    }
    this.nodeList = rationalisedMultiNodeLedsList.concat(rationalisedEdgeNodeLedsList);
    nodesMerged = true;
    while (nodesMerged) {
      nodesMerged = false;
      for (nodeIdx = _aa = 0, _ref8 = this.nodeList.length - 1; 0 <= _ref8 ? _aa < _ref8 : _aa > _ref8; nodeIdx = 0 <= _ref8 ? ++_aa : --_aa) {
        for (otherNodeIdx = _ab = _ref9 = nodeIdx + 1, _ref10 = this.nodeList.length; _ref9 <= _ref10 ? _ab < _ref10 : _ab > _ref10; otherNodeIdx = _ref9 <= _ref10 ? ++_ab : --_ab) {
          n1 = this.nodeList[nodeIdx];
          n2 = this.nodeList[otherNodeIdx];
          if (this.dist(n1.CofG, n2.CofG) < this.minDistBetweenNodes) {
            nodesMerged = true;
            n1.leds.push.apply(n1.leds, n2.leds);
            this.nodeList.splice(otherNodeIdx, 1);
            break;
          }
        }
        if (nodesMerged) {
          break;
        }
      }
    }
    _ref11 = this.nodeList;
    for (_ac = 0, _len16 = _ref11.length; _ac < _len16; _ac++) {
      nodeInfo = _ref11[_ac];
      ledDistances = {};
      curCofG = nodeInfo.CofG;
      _ref12 = nodeInfo.leds;
      for (_ad = 0, _len17 = _ref12.length; _ad < _len17; _ad++) {
        nodeLed = _ref12[_ad];
        distFromCofGtoLed = this.dist(curCofG, this.padLedsList[nodeLed.padIdx][nodeLed.ledIdx]);
        if (nodeLed.padIdx in ledDistances) {
          if (ledDistances[nodeLed.padIdx].dist > distFromCofGtoLed) {
            ledDistances[nodeLed.padIdx].dist = distFromCofGtoLed;
            ledDistances[nodeLed.padIdx].padIdx = nodeLed.padIdx;
            ledDistances[nodeLed.padIdx].ledIdx = nodeLed.ledIdx;
          }
        } else {
          ledDistances[nodeLed.padIdx] = {
            dist: distFromCofGtoLed,
            padIdx: nodeLed.padIdx,
            ledIdx: nodeLed.ledIdx
          };
        }
      }
      nodeInfo.leds = [];
      for (key in ledDistances) {
        val = ledDistances[key];
        nodeInfo.leds.push(val);
      }
      nodeInfo.CofG = this.getCofGforLeds(nodeInfo.leds);
    }
    _ref13 = this.nodeList;
    for (nodeIdx = _ae = 0, _len18 = _ref13.length; _ae < _len18; nodeIdx = ++_ae) {
      node = _ref13[nodeIdx];
      node["nodeId"] = nodeIdx;
      _ref14 = node.leds;
      for (_af = 0, _len19 = _ref14.length; _af < _len19; _af++) {
        led = _ref14[_af];
        led["uniqId"] = led.padIdx * 1000 + led.ledIdx;
        led["led"] = this.padLedsList[led.padIdx][led.ledIdx];
      }
    }
    ledsUsed = {};
    _ref15 = this.nodeList;
    for (nodeIdx = _ag = 0, _len20 = _ref15.length; _ag < _len20; nodeIdx = ++_ag) {
      nodeInfo = _ref15[nodeIdx];
      ledsModified = true;
      while (ledsModified) {
        ledsModified = false;
        _ref16 = nodeInfo.leds;
        for (_ah = 0, _len21 = _ref16.length; _ah < _len21; _ah++) {
          nodeLed = _ref16[_ah];
          if (nodeLed.uniqId in ledsUsed) {
            otherLedUse = ledsUsed[nodeLed.uniqId];
            if (otherLedUse.nodeIdx !== nodeIdx) {
              ledInfo = this.padLedsList[nodeLed.padIdx][nodeLed.ledIdx];
              ledDist = this.dist(ledInfo, this.nodeList[nodeIdx].CofG);
              otherLedDist = this.dist(ledInfo, this.nodeList[otherLedUse.nodeIdx].CofG);
              if (ledDist < otherLedDist) {
                newList = [];
                _ref17 = this.nodeList[otherLedUse.nodeIdx].leds;
                for (_ai = 0, _len22 = _ref17.length; _ai < _len22; _ai++) {
                  led = _ref17[_ai];
                  if (!(led.padIdx === nodeLed.padIdx && led.ledIdx === nodeLed.ledIdx)) {
                    newList.push(led);
                  }
                }
                this.nodeList[otherLedUse.nodeIdx].leds = newList;
                ledsUsed[nodeLed.uniqId] = {
                  nodeIdx: nodeIdx
                };
              } else {
                newList = [];
                _ref18 = this.nodeList[nodeIdx].leds;
                for (_aj = 0, _len23 = _ref18.length; _aj < _len23; _aj++) {
                  led = _ref18[_aj];
                  if (!(led.padIdx === nodeLed.padIdx && led.ledIdx === nodeLed.ledIdx)) {
                    newList.push(led);
                  }
                }
                this.nodeList[nodeIdx].leds = newList;
              }
              ledsModified = true;
              break;
            }
          } else {
            ledsUsed[nodeLed.uniqId] = {
              nodeIdx: nodeIdx
            };
          }
        }
      }
    }
    if (this.DEBUG_NODES) {
      _ref19 = this.nodeList;
      for (testNodeIdx = _ak = 0, _len24 = _ref19.length; _ak < _len24; testNodeIdx = ++_ak) {
        testNode = _ref19[testNodeIdx];
        oStr = testNodeIdx + " nodeLeds ";
        _ref20 = testNode.leds;
        for (_al = 0, _len25 = _ref20.length; _al < _len25; _al++) {
          testNodeLeds = _ref20[_al];
          oStr += "[" + testNodeLeds.padIdx + "," + testNodeLeds.ledIdx + "] ";
        }
        console.log(oStr);
      }
    }
    console.log("InnerNodeList " + rationalisedMultiNodeLedsList.length);
    console.log("FreeNodeList " + rationalisedEdgeNodeLedsList.length);
    console.log("Combined nodeList " + this.nodeList.length);
    this.edgeList = [];
    _ref21 = this.nodeList;
    for (_am = 0, _len26 = _ref21.length; _am < _len26; _am++) {
      fullNode = _ref21[_am];
      fullNode.edgesTo = [];
    }
    _ref22 = this.padAdjacencies;
    for (padIdx = _an = 0, _len27 = _ref22.length; _an < _len27; padIdx = ++_an) {
      padAdjList = _ref22[padIdx];
      fromNode = null;
      padCircuit = this.padLedsList[padIdx].length;
      if (this.dist(this.padLedsList[padIdx][0], this.padLedsList[padIdx][padCircuit - 1]) < this.maxDistForFirstAndLastLedsOnCircularPad) {
        padCircuit += 5;
      }
      for (testLedIdx = _ao = 0; 0 <= padCircuit ? _ao < padCircuit : _ao > padCircuit; testLedIdx = 0 <= padCircuit ? ++_ao : --_ao) {
        ledIdx = testLedIdx % this.padLedsList[padIdx].length;
        ledInfo = this.padLedsList[padIdx][ledIdx];
        wrappedRound = testLedIdx >= this.padLedsList[padIdx].length;
        thisNode = null;
        _ref23 = this.nodeList;
        for (testNodeIdx = _ap = 0, _len28 = _ref23.length; _ap < _len28; testNodeIdx = ++_ap) {
          testNode = _ref23[testNodeIdx];
          _ref24 = testNode.leds;
          for (_aq = 0, _len29 = _ref24.length; _aq < _len29; _aq++) {
            testNodeLeds = _ref24[_aq];
            if (testNodeLeds.padIdx === padIdx && testNodeLeds.ledIdx === ledIdx) {
              thisNode = {
                nodeIdx: testNodeIdx,
                padIdx: padIdx,
                ledIdx: ledIdx
              };
              break;
            }
          }
          if (thisNode != null) {
            break;
          }
        }
        if ((fromNode != null) && (thisNode != null) && thisNode.nodeIdx !== fromNode.nodeIdx) {
          if (this.nodeList[fromNode.nodeIdx].nodeDegree > 1 || this.nodeList[thisNode.nodeIdx].nodeDegree > 1) {
            if (this.DEBUG_EDGES) {
              console.log("fromNode " + fromNode + " thisNode " + thisNode);
            }
            curEdgeIdx = this.edgeList.length;
            edgeLength = Math.abs(fromNode.ledIdx - thisNode.ledIdx);
            if (wrappedRound) {
              this.padLedsList[padIdx].length - edgeLength;
            }
            if (!this.nodeList[fromNode.nodeIdx].edgesTo.some(function(el) {
              return el.toNodeIdx === thisNode.nodeIdx;
            })) {
              this.nodeList[fromNode.nodeIdx].edgesTo.push({
                toNodeIdx: thisNode.nodeIdx,
                edgeIdx: curEdgeIdx,
                edgeLength: edgeLength
              });
              edgeInfo = {
                padIdx: padIdx,
                fromNodeIdx: fromNode.nodeIdx,
                fromNode: this.nodeList[fromNode.nodeIdx],
                fromLedIdx: fromNode.ledIdx,
                toNodeIdx: thisNode.nodeIdx,
                toNode: this.nodeList[thisNode.nodeIdx],
                toLedIdx: thisNode.ledIdx
              };
              this.edgeList.push(edgeInfo);
            }
            if (!this.nodeList[thisNode.nodeIdx].edgesTo.some(function(el) {
              return el.toNodeIdx === fromNode.nodeIdx;
            })) {
              this.nodeList[thisNode.nodeIdx].edgesTo.push({
                toNodeIdx: fromNode.nodeIdx,
                edgeIdx: curEdgeIdx,
                edgeLength: edgeLength
              });
            }
          }
        }
        if (thisNode != null) {
          fromNode = {};
          for (key in thisNode) {
            val = thisNode[key];
            fromNode[key] = val;
          }
        }
      }
    }
    if (this.DEBUG_NODES || this.DEBUG_EDGES) {
      _ref25 = this.nodeList;
      for (nodeIdx = _ar = 0, _len30 = _ref25.length; _ar < _len30; nodeIdx = ++_ar) {
        node = _ref25[nodeIdx];
        edgeStr = "";
        _ref26 = node.edgesTo;
        for (_as = 0, _len31 = _ref26.length; _as < _len31; _as++) {
          edgeTo = _ref26[_as];
          edgeStr += " " + edgeTo.toNodeIdx;
        }
        console.log("Node " + nodeIdx + " edgesToNodes " + edgeStr);
      }
    }
    _ref27 = this.nodeList;
    _results = [];
    for (nodeIdx = _at = 0, _len32 = _ref27.length; _at < _len32; nodeIdx = ++_at) {
      node = _ref27[nodeIdx];
      _results.push((function() {
        var _au, _av, _aw, _ax, _ay, _az, _len33, _len34, _len35, _len36, _len37, _ref28, _ref29, _ref30, _ref31, _results1;
        _ref28 = node.edgesTo;
        _results1 = [];
        for (_au = 0, _len33 = _ref28.length; _au < _len33; _au++) {
          edgeTo = _ref28[_au];
          edgeSteps = [];
          edgesList = [];
          _ref29 = node.leds;
          for (_av = 0, _len34 = _ref29.length; _av < _len34; _av++) {
            nodeLed = _ref29[_av];
            padIdx = nodeLed.padIdx;
            padEdgeLeds = [];
            _ref30 = this.nodeList[edgeTo.toNodeIdx].leds;
            for (_aw = 0, _len35 = _ref30.length; _aw < _len35; _aw++) {
              toNodeLed = _ref30[_aw];
              if (padIdx === toNodeLed.padIdx) {
                numleds = Math.abs(toNodeLed.ledIdx - nodeLed.ledIdx);
                ledInc = toNodeLed.ledIdx > nodeLed.ledIdx ? 1 : -1;
                ledBase = nodeLed.ledIdx;
                if (node.nodeDegree >= 2 && this.nodeList[edgeTo.toNodeIdx].nodeDegree >= 2) {
                  led1 = this.padLedsList[padIdx][0];
                  led2 = this.padLedsList[padIdx][this.padLedsList[padIdx].length - 1];
                  wrapRoundNumLeds = this.padLedsList[padIdx].length - numleds;
                  if (numleds > wrapRoundNumLeds) {
                    if (this.dist(led1, led2) < 20) {
                      numleds = wrapRoundNumLeds;
                      ledInc = -ledInc;
                    }
                  }
                }
                if (this.DEBUG_EDGES) {
                  console.log("edgeLengthDiscrepancy from " + nodeIdx + " to " + edgeTo.toNodeIdx + " expected " + edgeTo.edgeLength + " is " + numleds);
                }
                edgeStr2 = "";
                for (i = _ax = 0, _ref31 = numleds - 1; 0 <= _ref31 ? _ax < _ref31 : _ax > _ref31; i = 0 <= _ref31 ? ++_ax : --_ax) {
                  if (edgeSteps.length <= i) {
                    edgeSteps[i] = [];
                  }
                  tLedIdx = (ledBase + (i + 1) * ledInc + this.padLedsList[padIdx].length) % this.padLedsList[padIdx].length;
                  edgeSteps[i].push({
                    padIdx: padIdx,
                    ledIdx: tLedIdx,
                    led: this.padLedsList[padIdx][tLedIdx]
                  });
                  edgeStr2 += tLedIdx + ",";
                  padEdgeLeds.push(this.padLedsList[padIdx][tLedIdx].chainIdx);
                }
                if (this.DEBUG_EDGES) {
                  console.log("Edge from " + nodeIdx + " to " + edgeTo.toNodeIdx + " alongPad " + padIdx + " numleds= " + numleds + " fromNodeLed " + nodeLed.ledIdx + " toNodeLed " + toNodeLed.ledIdx + " edgeLeds " + edgeStr2);
                }
                if (nodeIdx === 29) {
                  console.log("Edge from " + nodeIdx + " to " + edgeTo.toNodeIdx + " alongPad " + padIdx + " numleds= " + numleds + " fromNodeLed " + nodeLed.ledIdx + " toNodeLed " + toNodeLed.ledIdx + " edgeLeds " + edgeStr2);
                }
                edgesList.push({
                  padIdx: padIdx,
                  ledIdxs: padEdgeLeds
                });
              }
            }
          }
          edgeTo.edgeList = edgeSteps;
          edgeTo.edgeLedsList = edgesList;
          if (this.DEBUG_EDGES) {
            edgeStr3 = "edgeSteps ";
            for (_ay = 0, _len36 = edgeSteps.length; _ay < _len36; _ay++) {
              step = edgeSteps[_ay];
              for (_az = 0, _len37 = step.length; _az < _len37; _az++) {
                leds = step[_az];
                edgeStr3 += leds.padIdx + "." + leds.ledIdx + " ";
              }
              edgeStr3 += ", ";
            }
            _results1.push(console.log(edgeStr3));
          } else {
            _results1.push(void 0);
          }
        }
        return _results1;
      }).call(this));
    }
    return _results;
  };

  SpideyGraph.prototype.colourNodes = function() {
    var colrIdx, colrs, nodeLeds, _i, _len, _ref, _results;
    colrs = this.genColours(this.nodeList.length);
    colrIdx = 0;
    _ref = this.nodeList;
    _results = [];
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      nodeLeds = _ref[_i];
      _results.push(nodeLeds.colr = colrs[colrIdx++]);
    }
    return _results;
  };

  SpideyGraph.prototype.displayNodes = function() {
    var nodesSvg;
    return nodesSvg = this.svg.selectAll("g.nodes").data(this.nodeList).enter().append("g").attr("class", "nodes").append("circle").attr("class", "node").attr("cx", function(d) {
      return d.CofG.pt.x;
    }).attr("cy", function(d) {
      return d.CofG.pt.y;
    }).attr("r", 5).attr("fill", function(d, i) {
      return d.colr;
    });
  };

  SpideyGraph.prototype.displayEdges = function() {
    var edgesSvg;
    return edgesSvg = this.svg.selectAll("g.edges").data(this.edgeList).enter().append("g").attr("class", "edges").append("line").attr("class", "edge").attr("x1", function(d) {
      return d.fromNode.CofG.pt.x;
    }).attr("y1", function(d) {
      return d.fromNode.CofG.pt.y;
    }).attr("x2", function(d) {
      return d.toNode.CofG.pt.x;
    }).attr("y2", function(d) {
      return d.toNode.CofG.pt.y;
    }).attr("stroke", function(d, i) {
      if (d.toNode.nodeId === 20) {
        return 'red';
      }
      if (d.toNode.nodeId === 59) {
        return 'green';
      }
      if (d.toNode.nodeId === 42) {
        return 'blue';
      }
      return 'black';
    });
  };

  SpideyGraph.prototype.labelNodes = function() {
    var nodeLabels;
    nodeLabels = this.svg.selectAll(".nodelabels").data(this.nodeList).enter().append("text").attr("class", "nodelabels");
    return nodeLabels.attr("x", function(d) {
      return d.CofG.pt.x + 5;
    }).attr("y", function(d) {
      return d.CofG.pt.y - 2;
    }).text(function(d) {
      return d.nodeId;
    }).attr("font-family", "sans-serif").attr("font-size", "10px").attr("fill", "#005050");
  };

  SpideyGraph.prototype.animate = function() {
    this.animNodeIdx = 34;
    this.animEdgeIdx = 0;
    this.animEdgeStep = 0;
    this.atANode = true;
    this.steps = 0;
    return d3.timer(this.stepFn);
  };

  SpideyGraph.prototype.enableMouseMove = function(dispType) {
    if (dispType === "edges") {
      this.svg.on("mousemove", this.mousemoveEdges);
    } else {
      this.svg.on("mousemove", this.mousemoveLeds);
    }
  };

  SpideyGraph.prototype.mousemoveLeds = function() {
    var led, ledDist, ledIdx, nearestDist, nearestLed, pad, x, y, _i, _j, _len, _len1, _ref;
    x = event.x - 8;
    y = event.y - 8;
    nearestLed = null;
    nearestDist = 1000;
    _ref = this.padLedsList;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      pad = _ref[_i];
      for (ledIdx = _j = 0, _len1 = pad.length; _j < _len1; ledIdx = ++_j) {
        led = pad[ledIdx];
        ledDist = this.dist(led, {
          pt: {
            x: x,
            y: y
          }
        });
        if (ledDist < 20) {
          if (nearestDist > ledDist) {
            nearestDist = ledDist;
            nearestLed = led;
          }
        }
      }
    }
    if (nearestDist < 1000) {
      this.selectLed(nearestLed);
      this.sendLedCmd(nearestLed);
    }
  };

  SpideyGraph.prototype.selectLed = function(showLed) {
    var led, pad, _i, _j, _len, _len1, _ref;
    _ref = this.padLedsList;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      pad = _ref[_i];
      for (_j = 0, _len1 = pad.length; _j < _len1; _j++) {
        led = pad[_j];
        if (led === showLed) {
          led.clr = "#000000";
        } else {
          led.clr = "#dcdcdc";
        }
      }
    }
    return this.ledsSel.attr("fill", function(d) {
      return d.clr;
    });
  };

  SpideyGraph.prototype.mousemoveEdges = function() {
    var edgeStep, edgesTo, led, node, nodeIdx, pad, x, y, _i, _j, _k, _l, _len, _len1, _len2, _len3, _len4, _len5, _m, _n, _ref, _ref1, _ref2, _ref3;
    x = event.x - 8;
    y = event.y - 8;
    _ref = this.nodeList;
    for (nodeIdx = _i = 0, _len = _ref.length; _i < _len; nodeIdx = ++_i) {
      node = _ref[nodeIdx];
      if (this.dist(node.CofG, {
        pt: {
          x: x,
          y: y
        }
      }) < 10) {
        _ref1 = this.padLedsList;
        for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
          pad = _ref1[_j];
          for (_k = 0, _len2 = pad.length; _k < _len2; _k++) {
            led = pad[_k];
            led.clr = "#dcdcdc";
          }
        }
        _ref2 = node.edgesTo;
        for (_l = 0, _len3 = _ref2.length; _l < _len3; _l++) {
          edgesTo = _ref2[_l];
          _ref3 = edgesTo.edgeList;
          for (_m = 0, _len4 = _ref3.length; _m < _len4; _m++) {
            edgeStep = _ref3[_m];
            for (_n = 0, _len5 = edgeStep.length; _n < _len5; _n++) {
              led = edgeStep[_n];
              this.padLedsList[led.padIdx][led.ledIdx].clr = "#000000";
            }
          }
        }
      }
      this.ledsSel.attr("fill", function(d) {
        return d.clr;
      });
    }
  };

  SpideyGraph.prototype.toHex = function(val, digits) {
    return ("000000000000000" + val.toString(16)).slice(-digits);
  };

  SpideyGraph.prototype.sendLedCmd = function(showLed) {
    var sss;
    sss = "http://fractal:5078/rawcmd/01010b02" + this.toHex(showLed.chainIdx, 4) + "0001ff0000ff0000";
    $.get(sss, function(data) {
      return console.log("sent " + showLed.chainIdx + " = " + sss);
    });
  };

  SpideyGraph.prototype.stepFn = function() {
    var edgeSteps, led, nodeLed, pad, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2;
    this.steps++;
    if (this.steps > 10) {
      this.steps = 0;
      return false;
    }
    _ref = this.padLedsList;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      pad = _ref[_i];
      for (_j = 0, _len1 = pad.length; _j < _len1; _j++) {
        led = pad[_j];
        led.clr = "#dcdcdc";
      }
    }
    if (this.atANode) {
      this.animEdgeIdx = Math.floor(Math.random() * this.nodeList[this.animNodeIdx].edgesTo.length);
      this.atANode = false;
      this.animEdgeStep = 0;
      _ref1 = this.nodeList[this.animNodeIdx].leds;
      for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
        nodeLed = _ref1[_k];
        this.padLedsList[nodeLed.padIdx][nodeLed.ledIdx].clr = "#000000";
        this.sendLedCmd(nodeLed.led);
      }
      if (this.nodeList[this.animNodeIdx].edgesTo[this.animEdgeIdx].edgeList.length === 0) {
        this.animNodeIdx = this.nodeList[this.animNodeIdx].edgesTo[this.animEdgeIdx].toNodeIdx;
        this.atANode = true;
      }
    } else {
      edgeSteps = this.nodeList[this.animNodeIdx].edgesTo[this.animEdgeIdx].edgeList;
      if (this.animEdgeStep < edgeSteps.length) {
        _ref2 = edgeSteps[this.animEdgeStep];
        for (_l = 0, _len3 = _ref2.length; _l < _len3; _l++) {
          led = _ref2[_l];
          this.padLedsList[led.padIdx][led.ledIdx].clr = "#000000";
          this.sendLedCmd(led.led);
        }
      }
      this.animEdgeStep++;
      if (this.animEdgeStep >= edgeSteps.length) {
        this.animNodeIdx = this.nodeList[this.animNodeIdx].edgesTo[this.animEdgeIdx].toNodeIdx;
        this.atANode = true;
      }
    }
    this.ledsSel.attr("fill", function(d) {
      return d.clr;
    });
    return false;
  };

  return SpideyGraph;

})();
